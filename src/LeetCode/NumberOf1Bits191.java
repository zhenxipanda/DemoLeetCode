package LeetCode;

/**
 * LeetCode 191
 * 题意：
 * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 * 提示：
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 * 思路：统计1的个数，有个操作 n & (n - 1)，将最后面的1置为0，只要n != 0,就继续把尾部1置为0，统计次数，即为1的个数
 *      99.19% , 5.26%
 */
public class NumberOf1Bits191 {
    public static void main(String[] args) {
        int n = -3;
        int res = hammingWeight(n);
        System.out.println(res);
    }
    public static int hammingWeight(int n){
        int count = 0;
        while(n != 0){
            n = n & (n - 1);
            count ++ ;
        }
        return count;
    }
}
